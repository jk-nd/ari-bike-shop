package bikeRental;

/**
 * Protocol representing a rental contract between a customer and operator
 * @param contractId Unique identifier for the rental contract
 * @param bikeId The ID of the bike being rented
 * @param customerId The ID of the customer renting the bike
 * @param hourlyRate The hourly rate for this rental
 */
@api
protocol[customer, operator] RentalContract(
    var contractId: Text,
    var bikeId: Text,
    var customerId: Text,
    var hourlyRate: Number
) {
    require(contractId != "", "Contract ID cannot be empty");
    require(bikeId != "", "Bike ID cannot be empty");
    require(customerId != "", "Customer ID cannot be empty");
    require(hourlyRate > 0, "Hourly rate must be positive");

    // Business logic: Check that the bike is not already rented
    // This validation ensures that only one rental contract can exist per bike at a time
    // The bike must be in 'available' state to be rented
    // Note: This is a basic validation - in a production system, you would query existing contracts
    // For now, we rely on the frontend to check bike availability before creating contracts
    // TODO: Add proper bike state coordination in a future version

    initial state active;
    final state completed;
    final state cancelled;

    var startTime: DateTime = now();
    var endTime: Optional<DateTime> = optionalOf<DateTime>();
    var totalCost: Number = 0;
    var paymentStatus: Text = "pending";

    /**
     * Completes the rental contract and calculates final cost
     * @return Confirmation message with final cost
     */
    @api
    permission[customer | operator] completeRental() returns Text | active {
        endTime = optionalOf(now());
        var duration = startTime.durationUntil(endTime.getOrFail()).toSeconds() / 3600; // Convert to hours
        totalCost = duration * hourlyRate;
        paymentStatus = "completed";
        become completed;
        return "Rental completed. Duration: " + duration.toText() + " hours, Total cost: $" + totalCost.toText();
    };

    /**
     * Cancels the rental contract
     * @param reason Reason for cancellation
     * @return Confirmation message
     */
    @api
    permission[customer | operator] cancelRental(reason: Text) returns Text | active {
        require(reason != "", "Cancellation reason cannot be empty");
        
        endTime = optionalOf(now());
        paymentStatus = "cancelled";
        become cancelled;
        return "Rental cancelled: " + reason + ". Duration: " + startTime.durationUntil(endTime.getOrFail()).toSeconds().toText() + " seconds";
    };

    /**
     * Gets the rental contract details
     * @return Contract details including status and cost
     */
    @api
    permission[customer | operator] getContractDetails() returns Text {
        var status = activeState().getOrFail();
        var duration = if (endTime.isPresent()) {
            startTime.durationUntil(endTime.getOrFail()).toSeconds() / 3600;
        } else {
            now().durationUntil(startTime).toSeconds() / 3600;
        };
        
        return "Contract " + contractId + " - Bike: " + bikeId + ", Customer: " + customerId + 
               ", Status: " + status.toText() + ", Duration: " + duration.toText() + " hours, Cost: $" + totalCost.toText();
    };

    /**
     * Gets the current rental duration in hours
     * @return Duration in hours
     */
    @api
    permission[customer | operator] getCurrentDuration() returns Number {
        if (endTime.isPresent()) {
            return startTime.durationUntil(endTime.getOrFail()).toSeconds() / 3600;
        } else {
            return now().durationUntil(startTime).toSeconds() / 3600;
        };
    };

    /**
     * Gets the estimated cost based on current duration
     * @return Estimated cost
     */
    @api
    permission[customer | operator] getEstimatedCost() returns Number {
        var duration = if (endTime.isPresent()) {
            startTime.durationUntil(endTime.getOrFail()).toSeconds() / 3600;
        } else {
            now().durationUntil(startTime).toSeconds() / 3600;
        };
        return duration * hourlyRate;
    };

    /**
     * Validates that a bike is available for rental
     * This should be called before creating a rental contract
     * @param bikeIdToCheck The bike ID to check
     * @return True if the bike is available for rental
     */
    @api
    permission[operator] validateBikeAvailability(bikeIdToCheck: Text) returns Boolean {
        // This is a simple validation - in a real system, you would query existing contracts
        // For now, we'll rely on the bike's state being managed properly
        return bikeIdToCheck != bikeId || activeState().getOrFail().toText() != "active";
    };

    /**
     * Marks the associated bike as rented
     * This should be called after creating a rental contract
     * @return Confirmation message
     */
    @api
    permission[operator] markBikeAsRented() returns Text | active {
        // This permission allows the operator to mark the bike as rented
        // In a real system, this would coordinate with the Bike protocol
        return "Bike " + bikeId + " marked as rented for contract " + contractId;
    };
};
