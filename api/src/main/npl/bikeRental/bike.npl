package bikeRental;

/**
 * Protocol representing a bike in the rental system
 * @param bikeId Unique identifier for the bike
 * @param location Current location of the bike
 * @param pricePerHour Hourly rental rate for the bike
 */
@api
protocol[fleetManager, operator, customer] Bike(
    var bikeId: Text,
    var location: Text,
    var pricePerHour: Number
) {
    require(bikeId != "", "Bike ID cannot be empty");
    require(location != "", "Location cannot be empty");
    require(pricePerHour > 0, "Price per hour must be positive");

    initial state available;
    state rented;
    state maintenance;
    final state retired;

    var currentRentalContractId: Optional<Text> = optionalOf<Text>();
    var fleetId: Optional<Text> = optionalOf<Text>();
    var maintenanceNotes: Optional<Text> = optionalOf<Text>();

    /**
     * Assigns the bike to a specific fleet
     * @param fleetIdentifier The fleet identifier to assign the bike to
     * @return Confirmation message
     */
    @api
    permission[fleetManager] assignToFleet(fleetIdentifier: Text) returns Text | available, maintenance {
        require(fleetIdentifier != "", "Fleet identifier cannot be empty");
        
        fleetId = optionalOf(fleetIdentifier);
        return "Bike " + bikeId + " assigned to fleet " + fleetIdentifier;
    };

    /**
     * Removes the bike from its current fleet
     * @return Confirmation message
     */
    @api
    permission[fleetManager] removeFromFleet() returns Text | available, maintenance {
        fleetId = optionalOf<Text>();
        return "Bike " + bikeId + " removed from fleet";
    };

    /**
     * Marks the bike as rented by linking it to a rental contract
     * @param rentalContractId The ID of the rental contract
     * @return Confirmation message
     */
    @api
    permission[operator] markAsRented(rentalContractId: Text) returns Text | available {
        require(rentalContractId != "", "Rental contract ID cannot be empty");
        
        currentRentalContractId = optionalOf(rentalContractId);
        become rented;
        return "Bike " + bikeId + " marked as rented under contract " + rentalContractId;
    };

    /**
     * Marks the bike as returned and available
     * @return Confirmation message
     */
    @api
    permission[operator] markAsReturned() returns Text | rented {
        currentRentalContractId = optionalOf<Text>();
        become available;
        return "Bike " + bikeId + " marked as returned and available";
    };

    /**
     * Puts the bike into maintenance
     * @param notes Maintenance notes
     * @return Confirmation message
     */
    @api
    permission[fleetManager | operator] putInMaintenance(notes: Text) returns Text | available, rented {
        require(notes != "", "Maintenance notes cannot be empty");
        
        maintenanceNotes = optionalOf(notes);
        become maintenance;
        return "Bike " + bikeId + " put in maintenance: " + notes;
    };

    /**
     * Completes maintenance and makes bike available
     * @return Confirmation message
     */
    @api
    permission[fleetManager | operator] completeMaintenance() returns Text | maintenance {
        maintenanceNotes = optionalOf<Text>();
        become available;
        return "Bike " + bikeId + " maintenance completed and available";
    };

    /**
     * Retires the bike from service
     * @return Confirmation message
     */
    @api
    permission[fleetManager] retireBike() returns Text | available, maintenance {
        become retired;
        return "Bike " + bikeId + " has been retired from service";
    };

    /**
     * Gets the fleet ID the bike is assigned to
     * @return The fleet ID if assigned, empty otherwise
     */
    @api
    permission[fleetManager | operator] getFleetId() returns Optional<Text> {
        return fleetId;
    };

    /**
     * Gets the current rental contract ID if bike is rented
     * @return The rental contract ID if rented, empty otherwise
     */
    @api
    permission[fleetManager | operator] getCurrentRentalContract() returns Optional<Text> {
        return currentRentalContractId;
    };

    /**
     * Checks if the bike is available for rental
     * @return True if the bike is available, false otherwise
     */
    @api
    permission[fleetManager | operator] isAvailableForRental() returns Boolean {
        var status = activeState().getOrFail();
        return status.toText() == "available";
    };

    /**
     * Reserves the bike for rental (called by RentalContract creation)
     * @param rentalContractId The ID of the rental contract
     * @return True if successfully reserved, false if already rented
     */
    @api
    permission[operator] reserveForRental(rentalContractId: Text) returns Boolean | available {
        require(rentalContractId != "", "Rental contract ID cannot be empty");
        
        currentRentalContractId = optionalOf(rentalContractId);
        become rented;
        return true;
    };

    /**
     * Checks if the bike can be rented (available state and no current rental)
     * @return True if the bike can be rented, false otherwise
     */
    @api
    permission[operator] canBeRented() returns Boolean | available {
        return !currentRentalContractId.isPresent();
    };

    /**
     * Gets the bike status information
     * @return Current bike status and details
     */
    @api
    permission[fleetManager | operator] getBikeStatus() returns Text {
        var status = activeState().getOrFail();
        var fleet = fleetId.getOrElse("No fleet assigned");
        var contract = currentRentalContractId.getOrElse("No active rental");
        
        return "Bike " + bikeId + " at " + location + " - Status: " + status.toText() + ", Fleet: " + fleet + ", Contract: " + contract;
    };

    /**
     * Gets basic bike information for customers (available bikes only)
     * @return Basic bike information if available
     */
    @api
    permission[customer] getBikeInfo() returns Text | available {
        return "Bike " + bikeId + " at " + location + " - Price: $" + pricePerHour.toText() + "/hour";
    };

    /**
     * Gets bike details for customer dashboard (available bikes only)
     * @return Bike details as text
     */
    @api
    permission[customer] getBikeDetails() returns Text | available {
        return "Bike " + bikeId + " at " + location + " - Price: $" + pricePerHour.toText() + "/hour";
    };
};