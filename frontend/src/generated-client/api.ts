/* tslint:disable */
/* eslint-disable */
/**
 * bikeRental
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

export interface Bike {
    '@id': string;
    '@parties': BikeParties;
    '@actions': BikeActions;
    '@state': BikeStates;
    'currentRentalContractId': string | null;
    'fleetId': string | null;
    'maintenanceNotes': string | null;
    'bikeId': string;
    'location': string;
    'pricePerHour': number;
}


export interface BikeActions {
    'assignToFleet'?: string;
    'removeFromFleet'?: string;
    'markAsRented'?: string;
    'markAsReturned'?: string;
    'putInMaintenance'?: string;
    'completeMaintenance'?: string;
    'retireBike'?: string;
    'getFleetId'?: string;
    'getCurrentRentalContract'?: string;
    'isAvailableForRental'?: string;
    'reserveForRental'?: string;
    'canBeRented'?: string;
    'getBikeStatus'?: string;
    'getBikeInfo'?: string;
    'getBikeDetails'?: string;
}
export interface BikeAssignToFleetCommand {
    'fleetIdentifier': string;
}
export interface BikeCreate {
    'bikeId': string;
    'location': string;
    'pricePerHour': number;
    '@parties': BikeParties;
}
export interface BikeFleet {
    '@id': string;
    '@parties': BikeFleetParties;
    '@actions': BikeFleetActions;
    '@state': BikeFleetStates;
    'registeredBikes': Array<string>;
    'totalRevenue': number;
    'totalRentals': number;
    'fleetId': string;
    'locationName': string;
    'maxCapacity': number;
}


export interface BikeFleetActions {
    'registerBike'?: string;
    'unregisterBike'?: string;
    'recordRevenue'?: string;
    'getFleetStatistics'?: string;
    'getRegisteredBikes'?: string;
    'isBikeRegistered'?: string;
    'getBikeCount'?: string;
    'putFleetInMaintenance'?: string;
    'restoreFleetFromMaintenance'?: string;
    'decommissionFleet'?: string;
}
export interface BikeFleetCreate {
    'fleetId': string;
    'locationName': string;
    'maxCapacity': number;
    '@parties': BikeFleetParties;
}
export interface BikeFleetIsBikeRegisteredCommand {
    'bikeId': string;
}
export interface BikeFleetList {
    '@prev'?: string;
    '@next'?: string;
    'items': Array<BikeFleet>;
    'page'?: number;
    /**
     * Total number of accessible protocol instances. Only included if the `includeCount` query parameter was set.
     */
    'totalItems'?: number | null;
    /**
     * Total number of accessible pages. Only included if the `includeCount` query parameter was set.
     */
    'totalPages'?: number | null;
}
export interface BikeFleetParties {
    'fleetManager': Party;
    'operator': Party;
}
export interface BikeFleetRecordRevenueCommand {
    'amount': number;
}
export interface BikeFleetRegisterBikeCommand {
    'bikeId': string;
}

export const BikeFleetStates = {
    Active: 'active',
    Maintenance: 'maintenance',
    Decommissioned: 'decommissioned'
} as const;

export type BikeFleetStates = typeof BikeFleetStates[keyof typeof BikeFleetStates];


export interface BikeFleetUnregisterBikeCommand {
    'bikeId': string;
}
export interface BikeList {
    '@prev'?: string;
    '@next'?: string;
    'items': Array<Bike>;
    'page'?: number;
    /**
     * Total number of accessible protocol instances. Only included if the `includeCount` query parameter was set.
     */
    'totalItems'?: number | null;
    /**
     * Total number of accessible pages. Only included if the `includeCount` query parameter was set.
     */
    'totalPages'?: number | null;
}
export interface BikeMarkAsRentedCommand {
    'rentalContractId': string;
}
export interface BikeParties {
    'fleetManager': Party;
    'operator': Party;
    'customer': Party;
}
export interface BikePutInMaintenanceCommand {
    'notes': string;
}
export interface BikeReserveForRentalCommand {
    'rentalContractId': string;
}

export const BikeStates = {
    Available: 'available',
    Rented: 'rented',
    Maintenance: 'maintenance',
    Retired: 'retired'
} as const;

export type BikeStates = typeof BikeStates[keyof typeof BikeStates];


export interface CustomerProfile {
    '@id': string;
    '@parties': CustomerProfileParties;
    '@actions': CustomerProfileActions;
    '@state': CustomerProfileStates;
    'totalRentals': number;
    'loyaltyPoints': number;
    'totalSpent': number;
    'customerId': string;
    'email': string;
}


export interface CustomerProfileActions {
    'recordRental'?: string;
    'recordRentalWithCost'?: string;
    'getProfile'?: string;
    'suspendCustomer'?: string;
    'getLoyaltyTier'?: string;
}
export interface CustomerProfileCreate {
    'customerId': string;
    'email': string;
    '@parties': CustomerProfileParties;
}
export interface CustomerProfileList {
    '@prev'?: string;
    '@next'?: string;
    'items': Array<CustomerProfile>;
    'page'?: number;
    /**
     * Total number of accessible protocol instances. Only included if the `includeCount` query parameter was set.
     */
    'totalItems'?: number | null;
    /**
     * Total number of accessible pages. Only included if the `includeCount` query parameter was set.
     */
    'totalPages'?: number | null;
}
export interface CustomerProfileParties {
    'customer': Party;
    'operator': Party;
}
export interface CustomerProfileRecordRentalWithCostCommand {
    'cost': number;
}

export const CustomerProfileStates = {
    Active: 'active',
    Suspended: 'suspended'
} as const;

export type CustomerProfileStates = typeof CustomerProfileStates[keyof typeof CustomerProfileStates];


export interface ErrorClientStackTraceInner {
    'name'?: string;
    'protocolId'?: string | null;
    'elementType'?: string;
    'location'?: ErrorClientStackTraceInnerLocation;
}
export interface ErrorClientStackTraceInnerLocation {
    'file'?: string;
    'line'?: number;
    'sourceRef'?: ErrorClientStackTraceInnerLocationSourceRef | null;
}
export interface ErrorClientStackTraceInnerLocationSourceRef {
    'path'?: string;
    'commit'?: string;
}
export interface ErrorOrigin {
    'value'?: string;
    'code'?: number;
    'originType'?: string;
    'id'?: string;
    'message'?: string;
}
export interface ModelError {
    'errorType'?: string;
    'id'?: string;
    'idType'?: string;
    'message'?: string;
    'error'?: string | null;
    'origin'?: ErrorOrigin | null;
    'stackTrace'?: string | null;
    'clientStackTrace'?: Array<ErrorClientStackTraceInner> | null;
}
export interface Party {
    'entity': { [key: string]: Array<string>; };
    'access': { [key: string]: Array<string>; };
}
export interface Period {
    'days': number;
    'weeks': number;
    'months': number;
    'years': number;
}
export interface RentalContract {
    '@id': string;
    '@parties': RentalContractParties;
    '@actions': RentalContractActions;
    '@state': RentalContractStates;
    'startTime': string;
    'endTime': string | null;
    'totalCost': number;
    'paymentStatus': string;
    'contractId': string;
    'bikeId': string;
    'customerId': string;
    'hourlyRate': number;
}


export interface RentalContractActions {
    'completeRental'?: string;
    'cancelRental'?: string;
    'getContractDetails'?: string;
    'getCurrentDuration'?: string;
    'getEstimatedCost'?: string;
    'validateBikeAvailability'?: string;
    'markBikeAsRented'?: string;
}
export interface RentalContractCancelRentalCommand {
    'reason': string;
}
export interface RentalContractCreate {
    'contractId': string;
    'bikeId': string;
    'customerId': string;
    'hourlyRate': number;
    '@parties': RentalContractParties;
}
export interface RentalContractList {
    '@prev'?: string;
    '@next'?: string;
    'items': Array<RentalContract>;
    'page'?: number;
    /**
     * Total number of accessible protocol instances. Only included if the `includeCount` query parameter was set.
     */
    'totalItems'?: number | null;
    /**
     * Total number of accessible pages. Only included if the `includeCount` query parameter was set.
     */
    'totalPages'?: number | null;
}
export interface RentalContractParties {
    'customer': Party;
    'operator': Party;
}

export const RentalContractStates = {
    Active: 'active',
    Completed: 'completed',
    Cancelled: 'cancelled'
} as const;

export type RentalContractStates = typeof RentalContractStates[keyof typeof RentalContractStates];


export interface RentalContractValidateBikeAvailabilityCommand {
    'bikeIdToCheck': string;
}

/**
 * DefaultApi - axios parameter creator
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {BikeAssignToFleetCommand} bikeAssignToFleetCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeAssignToFleet: async (id: string, bikeAssignToFleetCommand: BikeAssignToFleetCommand, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeAssignToFleet', 'id', id)
            // verify required parameter 'bikeAssignToFleetCommand' is not null or undefined
            assertParamExists('bikeAssignToFleet', 'bikeAssignToFleetCommand', bikeAssignToFleetCommand)
            const localVarPath = `/npl/bikeRental/Bike/{id}/assignToFleet`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bikeAssignToFleetCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeCanBeRented: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeCanBeRented', 'id', id)
            const localVarPath = `/npl/bikeRental/Bike/{id}/canBeRented`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeCompleteMaintenance: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeCompleteMaintenance', 'id', id)
            const localVarPath = `/npl/bikeRental/Bike/{id}/completeMaintenance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetDecommissionFleet: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeFleetDecommissionFleet', 'id', id)
            const localVarPath = `/npl/bikeRental/BikeFleet/{id}/decommissionFleet`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetGetBikeCount: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeFleetGetBikeCount', 'id', id)
            const localVarPath = `/npl/bikeRental/BikeFleet/{id}/getBikeCount`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetGetFleetStatistics: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeFleetGetFleetStatistics', 'id', id)
            const localVarPath = `/npl/bikeRental/BikeFleet/{id}/getFleetStatistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetGetRegisteredBikes: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeFleetGetRegisteredBikes', 'id', id)
            const localVarPath = `/npl/bikeRental/BikeFleet/{id}/getRegisteredBikes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeFleetIsBikeRegisteredCommand} bikeFleetIsBikeRegisteredCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetIsBikeRegistered: async (id: string, bikeFleetIsBikeRegisteredCommand: BikeFleetIsBikeRegisteredCommand, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeFleetIsBikeRegistered', 'id', id)
            // verify required parameter 'bikeFleetIsBikeRegisteredCommand' is not null or undefined
            assertParamExists('bikeFleetIsBikeRegistered', 'bikeFleetIsBikeRegisteredCommand', bikeFleetIsBikeRegisteredCommand)
            const localVarPath = `/npl/bikeRental/BikeFleet/{id}/isBikeRegistered`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bikeFleetIsBikeRegisteredCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetPutFleetInMaintenance: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeFleetPutFleetInMaintenance', 'id', id)
            const localVarPath = `/npl/bikeRental/BikeFleet/{id}/putFleetInMaintenance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeFleetRecordRevenueCommand} bikeFleetRecordRevenueCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetRecordRevenue: async (id: string, bikeFleetRecordRevenueCommand: BikeFleetRecordRevenueCommand, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeFleetRecordRevenue', 'id', id)
            // verify required parameter 'bikeFleetRecordRevenueCommand' is not null or undefined
            assertParamExists('bikeFleetRecordRevenue', 'bikeFleetRecordRevenueCommand', bikeFleetRecordRevenueCommand)
            const localVarPath = `/npl/bikeRental/BikeFleet/{id}/recordRevenue`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bikeFleetRecordRevenueCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeFleetRegisterBikeCommand} bikeFleetRegisterBikeCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetRegisterBike: async (id: string, bikeFleetRegisterBikeCommand: BikeFleetRegisterBikeCommand, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeFleetRegisterBike', 'id', id)
            // verify required parameter 'bikeFleetRegisterBikeCommand' is not null or undefined
            assertParamExists('bikeFleetRegisterBike', 'bikeFleetRegisterBikeCommand', bikeFleetRegisterBikeCommand)
            const localVarPath = `/npl/bikeRental/BikeFleet/{id}/registerBike`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bikeFleetRegisterBikeCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetRestoreFleetFromMaintenance: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeFleetRestoreFleetFromMaintenance', 'id', id)
            const localVarPath = `/npl/bikeRental/BikeFleet/{id}/restoreFleetFromMaintenance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeFleetUnregisterBikeCommand} bikeFleetUnregisterBikeCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetUnregisterBike: async (id: string, bikeFleetUnregisterBikeCommand: BikeFleetUnregisterBikeCommand, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeFleetUnregisterBike', 'id', id)
            // verify required parameter 'bikeFleetUnregisterBikeCommand' is not null or undefined
            assertParamExists('bikeFleetUnregisterBike', 'bikeFleetUnregisterBikeCommand', bikeFleetUnregisterBikeCommand)
            const localVarPath = `/npl/bikeRental/BikeFleet/{id}/unregisterBike`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bikeFleetUnregisterBikeCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeGetBikeDetails: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeGetBikeDetails', 'id', id)
            const localVarPath = `/npl/bikeRental/Bike/{id}/getBikeDetails`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeGetBikeInfo: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeGetBikeInfo', 'id', id)
            const localVarPath = `/npl/bikeRental/Bike/{id}/getBikeInfo`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeGetBikeStatus: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeGetBikeStatus', 'id', id)
            const localVarPath = `/npl/bikeRental/Bike/{id}/getBikeStatus`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeGetCurrentRentalContract: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeGetCurrentRentalContract', 'id', id)
            const localVarPath = `/npl/bikeRental/Bike/{id}/getCurrentRentalContract`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeGetFleetId: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeGetFleetId', 'id', id)
            const localVarPath = `/npl/bikeRental/Bike/{id}/getFleetId`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeIsAvailableForRental: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeIsAvailableForRental', 'id', id)
            const localVarPath = `/npl/bikeRental/Bike/{id}/isAvailableForRental`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeMarkAsRentedCommand} bikeMarkAsRentedCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeMarkAsRented: async (id: string, bikeMarkAsRentedCommand: BikeMarkAsRentedCommand, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeMarkAsRented', 'id', id)
            // verify required parameter 'bikeMarkAsRentedCommand' is not null or undefined
            assertParamExists('bikeMarkAsRented', 'bikeMarkAsRentedCommand', bikeMarkAsRentedCommand)
            const localVarPath = `/npl/bikeRental/Bike/{id}/markAsRented`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bikeMarkAsRentedCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeMarkAsReturned: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeMarkAsReturned', 'id', id)
            const localVarPath = `/npl/bikeRental/Bike/{id}/markAsReturned`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {BikePutInMaintenanceCommand} bikePutInMaintenanceCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikePutInMaintenance: async (id: string, bikePutInMaintenanceCommand: BikePutInMaintenanceCommand, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikePutInMaintenance', 'id', id)
            // verify required parameter 'bikePutInMaintenanceCommand' is not null or undefined
            assertParamExists('bikePutInMaintenance', 'bikePutInMaintenanceCommand', bikePutInMaintenanceCommand)
            const localVarPath = `/npl/bikeRental/Bike/{id}/putInMaintenance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bikePutInMaintenanceCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeRemoveFromFleet: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeRemoveFromFleet', 'id', id)
            const localVarPath = `/npl/bikeRental/Bike/{id}/removeFromFleet`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeReserveForRentalCommand} bikeReserveForRentalCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeReserveForRental: async (id: string, bikeReserveForRentalCommand: BikeReserveForRentalCommand, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeReserveForRental', 'id', id)
            // verify required parameter 'bikeReserveForRentalCommand' is not null or undefined
            assertParamExists('bikeReserveForRental', 'bikeReserveForRentalCommand', bikeReserveForRentalCommand)
            const localVarPath = `/npl/bikeRental/Bike/{id}/reserveForRental`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bikeReserveForRentalCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeRetireBike: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bikeRetireBike', 'id', id)
            const localVarPath = `/npl/bikeRental/Bike/{id}/retireBike`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BikeCreate} bikeCreate 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBike: async (bikeCreate: BikeCreate, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bikeCreate' is not null or undefined
            assertParamExists('createBike', 'bikeCreate', bikeCreate)
            const localVarPath = `/npl/bikeRental/Bike/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bikeCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BikeFleetCreate} bikeFleetCreate 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBikeFleet: async (bikeFleetCreate: BikeFleetCreate, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bikeFleetCreate' is not null or undefined
            assertParamExists('createBikeFleet', 'bikeFleetCreate', bikeFleetCreate)
            const localVarPath = `/npl/bikeRental/BikeFleet/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bikeFleetCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerProfileCreate} customerProfileCreate 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerProfile: async (customerProfileCreate: CustomerProfileCreate, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerProfileCreate' is not null or undefined
            assertParamExists('createCustomerProfile', 'customerProfileCreate', customerProfileCreate)
            const localVarPath = `/npl/bikeRental/CustomerProfile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerProfileCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RentalContractCreate} rentalContractCreate 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRentalContract: async (rentalContractCreate: RentalContractCreate, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rentalContractCreate' is not null or undefined
            assertParamExists('createRentalContract', 'rentalContractCreate', rentalContractCreate)
            const localVarPath = `/npl/bikeRental/RentalContract/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rentalContractCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetLoyaltyTier: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerProfileGetLoyaltyTier', 'id', id)
            const localVarPath = `/npl/bikeRental/CustomerProfile/{id}/getLoyaltyTier`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetProfile: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerProfileGetProfile', 'id', id)
            const localVarPath = `/npl/bikeRental/CustomerProfile/{id}/getProfile`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileRecordRental: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerProfileRecordRental', 'id', id)
            const localVarPath = `/npl/bikeRental/CustomerProfile/{id}/recordRental`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CustomerProfileRecordRentalWithCostCommand} customerProfileRecordRentalWithCostCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileRecordRentalWithCost: async (id: string, customerProfileRecordRentalWithCostCommand: CustomerProfileRecordRentalWithCostCommand, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerProfileRecordRentalWithCost', 'id', id)
            // verify required parameter 'customerProfileRecordRentalWithCostCommand' is not null or undefined
            assertParamExists('customerProfileRecordRentalWithCost', 'customerProfileRecordRentalWithCostCommand', customerProfileRecordRentalWithCostCommand)
            const localVarPath = `/npl/bikeRental/CustomerProfile/{id}/recordRentalWithCost`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerProfileRecordRentalWithCostCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileSuspendCustomer: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerProfileSuspendCustomer', 'id', id)
            const localVarPath = `/npl/bikeRental/CustomerProfile/{id}/suspendCustomer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeByID: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBikeByID', 'id', id)
            const localVarPath = `/npl/bikeRental/Bike/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeFleetByID: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBikeFleetByID', 'id', id)
            const localVarPath = `/npl/bikeRental/BikeFleet/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeFleetList: async (page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/npl/bikeRental/BikeFleet/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (includeCount !== undefined) {
                localVarQueryParameter['includeCount'] = includeCount;
            }


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeList: async (page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/npl/bikeRental/Bike/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (includeCount !== undefined) {
                localVarQueryParameter['includeCount'] = includeCount;
            }


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerProfileByID: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCustomerProfileByID', 'id', id)
            const localVarPath = `/npl/bikeRental/CustomerProfile/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerProfileList: async (page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/npl/bikeRental/CustomerProfile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (includeCount !== undefined) {
                localVarQueryParameter['includeCount'] = includeCount;
            }


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenAPI: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/npl/bikeRental/-/openapi.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRentalContractByID: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRentalContractByID', 'id', id)
            const localVarPath = `/npl/bikeRental/RentalContract/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRentalContractList: async (page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/npl/bikeRental/RentalContract/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (includeCount !== undefined) {
                localVarQueryParameter['includeCount'] = includeCount;
            }


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {RentalContractCancelRentalCommand} rentalContractCancelRentalCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentalContractCancelRental: async (id: string, rentalContractCancelRentalCommand: RentalContractCancelRentalCommand, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rentalContractCancelRental', 'id', id)
            // verify required parameter 'rentalContractCancelRentalCommand' is not null or undefined
            assertParamExists('rentalContractCancelRental', 'rentalContractCancelRentalCommand', rentalContractCancelRentalCommand)
            const localVarPath = `/npl/bikeRental/RentalContract/{id}/cancelRental`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rentalContractCancelRentalCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentalContractCompleteRental: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rentalContractCompleteRental', 'id', id)
            const localVarPath = `/npl/bikeRental/RentalContract/{id}/completeRental`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentalContractGetContractDetails: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rentalContractGetContractDetails', 'id', id)
            const localVarPath = `/npl/bikeRental/RentalContract/{id}/getContractDetails`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentalContractGetCurrentDuration: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rentalContractGetCurrentDuration', 'id', id)
            const localVarPath = `/npl/bikeRental/RentalContract/{id}/getCurrentDuration`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentalContractGetEstimatedCost: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rentalContractGetEstimatedCost', 'id', id)
            const localVarPath = `/npl/bikeRental/RentalContract/{id}/getEstimatedCost`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentalContractMarkBikeAsRented: async (id: string, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rentalContractMarkBikeAsRented', 'id', id)
            const localVarPath = `/npl/bikeRental/RentalContract/{id}/markBikeAsRented`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {RentalContractValidateBikeAvailabilityCommand} rentalContractValidateBikeAvailabilityCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentalContractValidateBikeAvailability: async (id: string, rentalContractValidateBikeAvailabilityCommand: RentalContractValidateBikeAvailabilityCommand, xNPLAPI?: string, xNPLTAG?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rentalContractValidateBikeAvailability', 'id', id)
            // verify required parameter 'rentalContractValidateBikeAvailabilityCommand' is not null or undefined
            assertParamExists('rentalContractValidateBikeAvailability', 'rentalContractValidateBikeAvailabilityCommand', rentalContractValidateBikeAvailabilityCommand)
            const localVarPath = `/npl/bikeRental/RentalContract/{id}/validateBikeAvailability`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xNPLAPI != null) {
                localVarHeaderParameter['X-NPL-API'] = String(xNPLAPI);
            }
            if (xNPLTAG != null) {
                localVarHeaderParameter['X-NPL-TAG'] = String(xNPLTAG);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rentalContractValidateBikeAvailabilityCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {BikeAssignToFleetCommand} bikeAssignToFleetCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeAssignToFleet(id: string, bikeAssignToFleetCommand: BikeAssignToFleetCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeAssignToFleet(id, bikeAssignToFleetCommand, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeAssignToFleet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeCanBeRented(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeCanBeRented(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeCanBeRented']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeCompleteMaintenance(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeCompleteMaintenance(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeCompleteMaintenance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeFleetDecommissionFleet(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeFleetDecommissionFleet(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeFleetDecommissionFleet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeFleetGetBikeCount(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeFleetGetBikeCount(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeFleetGetBikeCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeFleetGetFleetStatistics(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeFleetGetFleetStatistics(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeFleetGetFleetStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeFleetGetRegisteredBikes(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeFleetGetRegisteredBikes(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeFleetGetRegisteredBikes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeFleetIsBikeRegisteredCommand} bikeFleetIsBikeRegisteredCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeFleetIsBikeRegistered(id: string, bikeFleetIsBikeRegisteredCommand: BikeFleetIsBikeRegisteredCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeFleetIsBikeRegistered(id, bikeFleetIsBikeRegisteredCommand, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeFleetIsBikeRegistered']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeFleetPutFleetInMaintenance(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeFleetPutFleetInMaintenance(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeFleetPutFleetInMaintenance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeFleetRecordRevenueCommand} bikeFleetRecordRevenueCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeFleetRecordRevenue(id: string, bikeFleetRecordRevenueCommand: BikeFleetRecordRevenueCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeFleetRecordRevenue(id, bikeFleetRecordRevenueCommand, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeFleetRecordRevenue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeFleetRegisterBikeCommand} bikeFleetRegisterBikeCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeFleetRegisterBike(id: string, bikeFleetRegisterBikeCommand: BikeFleetRegisterBikeCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeFleetRegisterBike(id, bikeFleetRegisterBikeCommand, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeFleetRegisterBike']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeFleetRestoreFleetFromMaintenance(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeFleetRestoreFleetFromMaintenance(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeFleetRestoreFleetFromMaintenance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeFleetUnregisterBikeCommand} bikeFleetUnregisterBikeCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeFleetUnregisterBike(id: string, bikeFleetUnregisterBikeCommand: BikeFleetUnregisterBikeCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeFleetUnregisterBike(id, bikeFleetUnregisterBikeCommand, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeFleetUnregisterBike']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeGetBikeDetails(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeGetBikeDetails(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeGetBikeDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeGetBikeInfo(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeGetBikeInfo(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeGetBikeInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeGetBikeStatus(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeGetBikeStatus(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeGetBikeStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeGetCurrentRentalContract(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeGetCurrentRentalContract(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeGetCurrentRentalContract']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeGetFleetId(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeGetFleetId(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeGetFleetId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeIsAvailableForRental(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeIsAvailableForRental(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeIsAvailableForRental']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeMarkAsRentedCommand} bikeMarkAsRentedCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeMarkAsRented(id: string, bikeMarkAsRentedCommand: BikeMarkAsRentedCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeMarkAsRented(id, bikeMarkAsRentedCommand, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeMarkAsRented']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeMarkAsReturned(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeMarkAsReturned(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeMarkAsReturned']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {BikePutInMaintenanceCommand} bikePutInMaintenanceCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikePutInMaintenance(id: string, bikePutInMaintenanceCommand: BikePutInMaintenanceCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikePutInMaintenance(id, bikePutInMaintenanceCommand, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikePutInMaintenance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeRemoveFromFleet(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeRemoveFromFleet(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeRemoveFromFleet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeReserveForRentalCommand} bikeReserveForRentalCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeReserveForRental(id: string, bikeReserveForRentalCommand: BikeReserveForRentalCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeReserveForRental(id, bikeReserveForRentalCommand, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeReserveForRental']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bikeRetireBike(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bikeRetireBike(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bikeRetireBike']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BikeCreate} bikeCreate 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBike(bikeCreate: BikeCreate, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bike>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBike(bikeCreate, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createBike']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BikeFleetCreate} bikeFleetCreate 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBikeFleet(bikeFleetCreate: BikeFleetCreate, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BikeFleet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBikeFleet(bikeFleetCreate, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createBikeFleet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerProfileCreate} customerProfileCreate 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomerProfile(customerProfileCreate: CustomerProfileCreate, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomerProfile(customerProfileCreate, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createCustomerProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RentalContractCreate} rentalContractCreate 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRentalContract(rentalContractCreate: RentalContractCreate, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RentalContract>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRentalContract(rentalContractCreate, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createRentalContract']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileGetLoyaltyTier(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileGetLoyaltyTier(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.customerProfileGetLoyaltyTier']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileGetProfile(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileGetProfile(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.customerProfileGetProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileRecordRental(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileRecordRental(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.customerProfileRecordRental']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {CustomerProfileRecordRentalWithCostCommand} customerProfileRecordRentalWithCostCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileRecordRentalWithCost(id: string, customerProfileRecordRentalWithCostCommand: CustomerProfileRecordRentalWithCostCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileRecordRentalWithCost(id, customerProfileRecordRentalWithCostCommand, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.customerProfileRecordRentalWithCost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileSuspendCustomer(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileSuspendCustomer(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.customerProfileSuspendCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBikeByID(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bike>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBikeByID(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBikeByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBikeFleetByID(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BikeFleet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBikeFleetByID(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBikeFleetByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBikeFleetList(page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BikeFleetList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBikeFleetList(page, pageSize, includeCount, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBikeFleetList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBikeList(page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BikeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBikeList(page, pageSize, includeCount, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBikeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerProfileByID(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerProfileByID(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getCustomerProfileByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerProfileList(page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerProfileList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerProfileList(page, pageSize, includeCount, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getCustomerProfileList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpenAPI(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpenAPI(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getOpenAPI']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRentalContractByID(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RentalContract>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRentalContractByID(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRentalContractByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRentalContractList(page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RentalContractList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRentalContractList(page, pageSize, includeCount, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRentalContractList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {RentalContractCancelRentalCommand} rentalContractCancelRentalCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentalContractCancelRental(id: string, rentalContractCancelRentalCommand: RentalContractCancelRentalCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentalContractCancelRental(id, rentalContractCancelRentalCommand, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rentalContractCancelRental']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentalContractCompleteRental(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentalContractCompleteRental(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rentalContractCompleteRental']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentalContractGetContractDetails(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentalContractGetContractDetails(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rentalContractGetContractDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentalContractGetCurrentDuration(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentalContractGetCurrentDuration(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rentalContractGetCurrentDuration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentalContractGetEstimatedCost(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentalContractGetEstimatedCost(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rentalContractGetEstimatedCost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentalContractMarkBikeAsRented(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentalContractMarkBikeAsRented(id, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rentalContractMarkBikeAsRented']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {RentalContractValidateBikeAvailabilityCommand} rentalContractValidateBikeAvailabilityCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentalContractValidateBikeAvailability(id: string, rentalContractValidateBikeAvailabilityCommand: RentalContractValidateBikeAvailabilityCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentalContractValidateBikeAvailability(id, rentalContractValidateBikeAvailabilityCommand, xNPLAPI, xNPLTAG, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rentalContractValidateBikeAvailability']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {BikeAssignToFleetCommand} bikeAssignToFleetCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeAssignToFleet(id: string, bikeAssignToFleetCommand: BikeAssignToFleetCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeAssignToFleet(id, bikeAssignToFleetCommand, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeCanBeRented(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.bikeCanBeRented(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeCompleteMaintenance(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeCompleteMaintenance(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetDecommissionFleet(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeFleetDecommissionFleet(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetGetBikeCount(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.bikeFleetGetBikeCount(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetGetFleetStatistics(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeFleetGetFleetStatistics(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetGetRegisteredBikes(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.bikeFleetGetRegisteredBikes(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeFleetIsBikeRegisteredCommand} bikeFleetIsBikeRegisteredCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetIsBikeRegistered(id: string, bikeFleetIsBikeRegisteredCommand: BikeFleetIsBikeRegisteredCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.bikeFleetIsBikeRegistered(id, bikeFleetIsBikeRegisteredCommand, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetPutFleetInMaintenance(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeFleetPutFleetInMaintenance(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeFleetRecordRevenueCommand} bikeFleetRecordRevenueCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetRecordRevenue(id: string, bikeFleetRecordRevenueCommand: BikeFleetRecordRevenueCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeFleetRecordRevenue(id, bikeFleetRecordRevenueCommand, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeFleetRegisterBikeCommand} bikeFleetRegisterBikeCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetRegisterBike(id: string, bikeFleetRegisterBikeCommand: BikeFleetRegisterBikeCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeFleetRegisterBike(id, bikeFleetRegisterBikeCommand, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetRestoreFleetFromMaintenance(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeFleetRestoreFleetFromMaintenance(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeFleetUnregisterBikeCommand} bikeFleetUnregisterBikeCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeFleetUnregisterBike(id: string, bikeFleetUnregisterBikeCommand: BikeFleetUnregisterBikeCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeFleetUnregisterBike(id, bikeFleetUnregisterBikeCommand, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeGetBikeDetails(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeGetBikeDetails(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeGetBikeInfo(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeGetBikeInfo(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeGetBikeStatus(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeGetBikeStatus(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeGetCurrentRentalContract(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeGetCurrentRentalContract(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeGetFleetId(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeGetFleetId(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeIsAvailableForRental(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.bikeIsAvailableForRental(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeMarkAsRentedCommand} bikeMarkAsRentedCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeMarkAsRented(id: string, bikeMarkAsRentedCommand: BikeMarkAsRentedCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeMarkAsRented(id, bikeMarkAsRentedCommand, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeMarkAsReturned(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeMarkAsReturned(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {BikePutInMaintenanceCommand} bikePutInMaintenanceCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikePutInMaintenance(id: string, bikePutInMaintenanceCommand: BikePutInMaintenanceCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikePutInMaintenance(id, bikePutInMaintenanceCommand, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeRemoveFromFleet(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeRemoveFromFleet(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {BikeReserveForRentalCommand} bikeReserveForRentalCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeReserveForRental(id: string, bikeReserveForRentalCommand: BikeReserveForRentalCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.bikeReserveForRental(id, bikeReserveForRentalCommand, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bikeRetireBike(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.bikeRetireBike(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BikeCreate} bikeCreate 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBike(bikeCreate: BikeCreate, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<Bike> {
            return localVarFp.createBike(bikeCreate, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BikeFleetCreate} bikeFleetCreate 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBikeFleet(bikeFleetCreate: BikeFleetCreate, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<BikeFleet> {
            return localVarFp.createBikeFleet(bikeFleetCreate, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerProfileCreate} customerProfileCreate 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerProfile(customerProfileCreate: CustomerProfileCreate, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustomerProfile> {
            return localVarFp.createCustomerProfile(customerProfileCreate, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RentalContractCreate} rentalContractCreate 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRentalContract(rentalContractCreate: RentalContractCreate, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<RentalContract> {
            return localVarFp.createRentalContract(rentalContractCreate, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetLoyaltyTier(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.customerProfileGetLoyaltyTier(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetProfile(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.customerProfileGetProfile(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileRecordRental(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.customerProfileRecordRental(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CustomerProfileRecordRentalWithCostCommand} customerProfileRecordRentalWithCostCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileRecordRentalWithCost(id: string, customerProfileRecordRentalWithCostCommand: CustomerProfileRecordRentalWithCostCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.customerProfileRecordRentalWithCost(id, customerProfileRecordRentalWithCostCommand, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileSuspendCustomer(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.customerProfileSuspendCustomer(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeByID(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<Bike> {
            return localVarFp.getBikeByID(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeFleetByID(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<BikeFleet> {
            return localVarFp.getBikeFleetByID(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeFleetList(page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<BikeFleetList> {
            return localVarFp.getBikeFleetList(page, pageSize, includeCount, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeList(page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<BikeList> {
            return localVarFp.getBikeList(page, pageSize, includeCount, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerProfileByID(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustomerProfile> {
            return localVarFp.getCustomerProfileByID(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerProfileList(page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustomerProfileList> {
            return localVarFp.getCustomerProfileList(page, pageSize, includeCount, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenAPI(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getOpenAPI(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRentalContractByID(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<RentalContract> {
            return localVarFp.getRentalContractByID(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRentalContractList(page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<RentalContractList> {
            return localVarFp.getRentalContractList(page, pageSize, includeCount, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {RentalContractCancelRentalCommand} rentalContractCancelRentalCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentalContractCancelRental(id: string, rentalContractCancelRentalCommand: RentalContractCancelRentalCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.rentalContractCancelRental(id, rentalContractCancelRentalCommand, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentalContractCompleteRental(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.rentalContractCompleteRental(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentalContractGetContractDetails(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.rentalContractGetContractDetails(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentalContractGetCurrentDuration(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.rentalContractGetCurrentDuration(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentalContractGetEstimatedCost(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.rentalContractGetEstimatedCost(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentalContractMarkBikeAsRented(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.rentalContractMarkBikeAsRented(id, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {RentalContractValidateBikeAvailabilityCommand} rentalContractValidateBikeAvailabilityCommand 
         * @param {string} [xNPLAPI] Optional parameter to require a specific API version
         * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentalContractValidateBikeAvailability(id: string, rentalContractValidateBikeAvailabilityCommand: RentalContractValidateBikeAvailabilityCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.rentalContractValidateBikeAvailability(id, rentalContractValidateBikeAvailabilityCommand, xNPLAPI, xNPLTAG, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 */
export interface DefaultApiInterface {
    /**
     * 
     * @param {string} id 
     * @param {BikeAssignToFleetCommand} bikeAssignToFleetCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeAssignToFleet(id: string, bikeAssignToFleetCommand: BikeAssignToFleetCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeCanBeRented(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeCompleteMaintenance(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeFleetDecommissionFleet(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeFleetGetBikeCount(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeFleetGetFleetStatistics(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeFleetGetRegisteredBikes(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<string>>;

    /**
     * 
     * @param {string} id 
     * @param {BikeFleetIsBikeRegisteredCommand} bikeFleetIsBikeRegisteredCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeFleetIsBikeRegistered(id: string, bikeFleetIsBikeRegisteredCommand: BikeFleetIsBikeRegisteredCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeFleetPutFleetInMaintenance(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {BikeFleetRecordRevenueCommand} bikeFleetRecordRevenueCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeFleetRecordRevenue(id: string, bikeFleetRecordRevenueCommand: BikeFleetRecordRevenueCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {BikeFleetRegisterBikeCommand} bikeFleetRegisterBikeCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeFleetRegisterBike(id: string, bikeFleetRegisterBikeCommand: BikeFleetRegisterBikeCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeFleetRestoreFleetFromMaintenance(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {BikeFleetUnregisterBikeCommand} bikeFleetUnregisterBikeCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeFleetUnregisterBike(id: string, bikeFleetUnregisterBikeCommand: BikeFleetUnregisterBikeCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeGetBikeDetails(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeGetBikeInfo(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeGetBikeStatus(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeGetCurrentRentalContract(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeGetFleetId(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeIsAvailableForRental(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * 
     * @param {string} id 
     * @param {BikeMarkAsRentedCommand} bikeMarkAsRentedCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeMarkAsRented(id: string, bikeMarkAsRentedCommand: BikeMarkAsRentedCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeMarkAsReturned(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {BikePutInMaintenanceCommand} bikePutInMaintenanceCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikePutInMaintenance(id: string, bikePutInMaintenanceCommand: BikePutInMaintenanceCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeRemoveFromFleet(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {BikeReserveForRentalCommand} bikeReserveForRentalCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeReserveForRental(id: string, bikeReserveForRentalCommand: BikeReserveForRentalCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bikeRetireBike(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {BikeCreate} bikeCreate 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBike(bikeCreate: BikeCreate, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<Bike>;

    /**
     * 
     * @param {BikeFleetCreate} bikeFleetCreate 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBikeFleet(bikeFleetCreate: BikeFleetCreate, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<BikeFleet>;

    /**
     * 
     * @param {CustomerProfileCreate} customerProfileCreate 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerProfile(customerProfileCreate: CustomerProfileCreate, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustomerProfile>;

    /**
     * 
     * @param {RentalContractCreate} rentalContractCreate 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRentalContract(rentalContractCreate: RentalContractCreate, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<RentalContract>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customerProfileGetLoyaltyTier(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customerProfileGetProfile(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customerProfileRecordRental(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {CustomerProfileRecordRentalWithCostCommand} customerProfileRecordRentalWithCostCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customerProfileRecordRentalWithCost(id: string, customerProfileRecordRentalWithCostCommand: CustomerProfileRecordRentalWithCostCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customerProfileSuspendCustomer(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeByID(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<Bike>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeFleetByID(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<BikeFleet>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeFleetList(page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<BikeFleetList>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeList(page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<BikeList>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerProfileByID(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustomerProfile>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerProfileList(page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustomerProfileList>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOpenAPI(options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRentalContractByID(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<RentalContract>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRentalContractList(page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<RentalContractList>;

    /**
     * 
     * @param {string} id 
     * @param {RentalContractCancelRentalCommand} rentalContractCancelRentalCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rentalContractCancelRental(id: string, rentalContractCancelRentalCommand: RentalContractCancelRentalCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rentalContractCompleteRental(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rentalContractGetContractDetails(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rentalContractGetCurrentDuration(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rentalContractGetEstimatedCost(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rentalContractMarkBikeAsRented(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {string} id 
     * @param {RentalContractValidateBikeAvailabilityCommand} rentalContractValidateBikeAvailabilityCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rentalContractValidateBikeAvailability(id: string, rentalContractValidateBikeAvailabilityCommand: RentalContractValidateBikeAvailabilityCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean>;

}

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @param {string} id 
     * @param {BikeAssignToFleetCommand} bikeAssignToFleetCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeAssignToFleet(id: string, bikeAssignToFleetCommand: BikeAssignToFleetCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeAssignToFleet(id, bikeAssignToFleetCommand, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeCanBeRented(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeCanBeRented(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeCompleteMaintenance(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeCompleteMaintenance(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeFleetDecommissionFleet(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeFleetDecommissionFleet(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeFleetGetBikeCount(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeFleetGetBikeCount(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeFleetGetFleetStatistics(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeFleetGetFleetStatistics(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeFleetGetRegisteredBikes(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeFleetGetRegisteredBikes(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {BikeFleetIsBikeRegisteredCommand} bikeFleetIsBikeRegisteredCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeFleetIsBikeRegistered(id: string, bikeFleetIsBikeRegisteredCommand: BikeFleetIsBikeRegisteredCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeFleetIsBikeRegistered(id, bikeFleetIsBikeRegisteredCommand, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeFleetPutFleetInMaintenance(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeFleetPutFleetInMaintenance(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {BikeFleetRecordRevenueCommand} bikeFleetRecordRevenueCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeFleetRecordRevenue(id: string, bikeFleetRecordRevenueCommand: BikeFleetRecordRevenueCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeFleetRecordRevenue(id, bikeFleetRecordRevenueCommand, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {BikeFleetRegisterBikeCommand} bikeFleetRegisterBikeCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeFleetRegisterBike(id: string, bikeFleetRegisterBikeCommand: BikeFleetRegisterBikeCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeFleetRegisterBike(id, bikeFleetRegisterBikeCommand, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeFleetRestoreFleetFromMaintenance(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeFleetRestoreFleetFromMaintenance(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {BikeFleetUnregisterBikeCommand} bikeFleetUnregisterBikeCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeFleetUnregisterBike(id: string, bikeFleetUnregisterBikeCommand: BikeFleetUnregisterBikeCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeFleetUnregisterBike(id, bikeFleetUnregisterBikeCommand, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeGetBikeDetails(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeGetBikeDetails(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeGetBikeInfo(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeGetBikeInfo(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeGetBikeStatus(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeGetBikeStatus(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeGetCurrentRentalContract(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeGetCurrentRentalContract(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeGetFleetId(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeGetFleetId(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeIsAvailableForRental(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeIsAvailableForRental(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {BikeMarkAsRentedCommand} bikeMarkAsRentedCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeMarkAsRented(id: string, bikeMarkAsRentedCommand: BikeMarkAsRentedCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeMarkAsRented(id, bikeMarkAsRentedCommand, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeMarkAsReturned(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeMarkAsReturned(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {BikePutInMaintenanceCommand} bikePutInMaintenanceCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikePutInMaintenance(id: string, bikePutInMaintenanceCommand: BikePutInMaintenanceCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikePutInMaintenance(id, bikePutInMaintenanceCommand, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeRemoveFromFleet(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeRemoveFromFleet(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {BikeReserveForRentalCommand} bikeReserveForRentalCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeReserveForRental(id: string, bikeReserveForRentalCommand: BikeReserveForRentalCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeReserveForRental(id, bikeReserveForRentalCommand, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bikeRetireBike(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bikeRetireBike(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BikeCreate} bikeCreate 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createBike(bikeCreate: BikeCreate, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBike(bikeCreate, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BikeFleetCreate} bikeFleetCreate 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createBikeFleet(bikeFleetCreate: BikeFleetCreate, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBikeFleet(bikeFleetCreate, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerProfileCreate} customerProfileCreate 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createCustomerProfile(customerProfileCreate: CustomerProfileCreate, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createCustomerProfile(customerProfileCreate, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RentalContractCreate} rentalContractCreate 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createRentalContract(rentalContractCreate: RentalContractCreate, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createRentalContract(rentalContractCreate, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public customerProfileGetLoyaltyTier(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).customerProfileGetLoyaltyTier(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public customerProfileGetProfile(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).customerProfileGetProfile(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public customerProfileRecordRental(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).customerProfileRecordRental(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {CustomerProfileRecordRentalWithCostCommand} customerProfileRecordRentalWithCostCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public customerProfileRecordRentalWithCost(id: string, customerProfileRecordRentalWithCostCommand: CustomerProfileRecordRentalWithCostCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).customerProfileRecordRentalWithCost(id, customerProfileRecordRentalWithCostCommand, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public customerProfileSuspendCustomer(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).customerProfileSuspendCustomer(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getBikeByID(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBikeByID(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getBikeFleetByID(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBikeFleetByID(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getBikeFleetList(page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBikeFleetList(page, pageSize, includeCount, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getBikeList(page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBikeList(page, pageSize, includeCount, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getCustomerProfileByID(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCustomerProfileByID(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getCustomerProfileList(page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCustomerProfileList(page, pageSize, includeCount, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getOpenAPI(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getOpenAPI(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getRentalContractByID(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRentalContractByID(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {boolean} [includeCount] Include &#x60;totalItems&#x60; and &#x60;totalPages&#x60; in the response if set. This option is very expensive, so should be avoided when possible.
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getRentalContractList(page?: number, pageSize?: number, includeCount?: boolean, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRentalContractList(page, pageSize, includeCount, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {RentalContractCancelRentalCommand} rentalContractCancelRentalCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public rentalContractCancelRental(id: string, rentalContractCancelRentalCommand: RentalContractCancelRentalCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rentalContractCancelRental(id, rentalContractCancelRentalCommand, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public rentalContractCompleteRental(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rentalContractCompleteRental(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public rentalContractGetContractDetails(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rentalContractGetContractDetails(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public rentalContractGetCurrentDuration(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rentalContractGetCurrentDuration(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public rentalContractGetEstimatedCost(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rentalContractGetEstimatedCost(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public rentalContractMarkBikeAsRented(id: string, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rentalContractMarkBikeAsRented(id, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {RentalContractValidateBikeAvailabilityCommand} rentalContractValidateBikeAvailabilityCommand 
     * @param {string} [xNPLAPI] Optional parameter to require a specific API version
     * @param {string} [xNPLTAG] Optional parameter to require a specific NPL Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public rentalContractValidateBikeAvailability(id: string, rentalContractValidateBikeAvailabilityCommand: RentalContractValidateBikeAvailabilityCommand, xNPLAPI?: string, xNPLTAG?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rentalContractValidateBikeAvailability(id, rentalContractValidateBikeAvailabilityCommand, xNPLAPI, xNPLTAG, options).then((request) => request(this.axios, this.basePath));
    }
}



